package org.motechproject.ghana.national.functional.patient;

import org.junit.runner.RunWith;
import org.motechproject.ghana.national.functional.OpenMRSAwareFunctionalTest;
import org.motechproject.ghana.national.functional.data.TestPatient;
import org.motechproject.ghana.national.functional.pages.openmrs.OpenMRSEncounterPage;
import org.motechproject.ghana.national.functional.pages.openmrs.OpenMRSPatientPage;
import org.motechproject.ghana.national.functional.pages.openmrs.vo.OpenMRSObservationVO;
import org.motechproject.ghana.national.functional.pages.patient.PatientEditPage;
import org.motechproject.ghana.national.functional.pages.patient.PatientPage;
import org.motechproject.ghana.national.functional.pages.patient.SearchPatientPage;
import org.motechproject.ghana.national.functional.util.DataGenerator;
import org.motechproject.ghana.national.repository.IdentifierGenerator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.util.Collections;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:/applicationContext-functional-tests.xml"})
public class PatientTest extends OpenMRSAwareFunctionalTest{

    @Autowired
    private IdentifierGenerator identifierGenerator;

    private DataGenerator dataGenerator;

    @BeforeMethod
    public void setUp() {
        dataGenerator = new DataGenerator();
    }

    @Test
    public void shouldCreateAPatientWithAutoGeneratedIdSearchForHerByNameAndEditDetails() {
        final String staffId = staffGenerator.createStaff(browser, homePage);
        PatientPage patientPage = browser.toCreatePatient(homePage);

        String firstName = "First Name" + dataGenerator.randomString(5);
        TestPatient patient = TestPatient.with(firstName, staffId)
                .patientType(TestPatient.PATIENT_TYPE.PREGNANT_MOTHER).estimatedDateOfBirth(false);
        patientPage.create(patient);
        SearchPatientPage searchPatientPage = browser.toSearchPatient(patientPage);
        searchPatientPage.searchWithName(patient.firstName());
        searchPatientPage.displaying(patient);

        searchPatientPage.searchWithName(firstName);
        searchPatientPage.displaying(patient);

        PatientEditPage patientEditPage = browser.toPatientEditPage(searchPatientPage, patient);
        patientEditPage.displaying(patient);
        
        String motechId=patientEditPage.motechId();

        OpenMRSPatientPage openMRSPatientPage = openMRSBrowser.toOpenMRSPatientPage(openMRSDB.getOpenMRSId(motechId));
        String encounterId = openMRSPatientPage.chooseEncounter("PATIENTREGVISIT");

        OpenMRSEncounterPage openMRSEncounterPage = openMRSBrowser.toOpenMRSEncounterPage(encounterId);

        openMRSEncounterPage.displaying(Collections.<OpenMRSObservationVO>emptyList());
    }

    @Test
    public void shouldCreateAPatientWithPrePrintedIdAndSearchForHerByMotechId() {
        final String staffId = staffGenerator.createStaff(browser, homePage);
        PatientPage patientPage = browser.toCreatePatient(homePage);

        TestPatient patient = TestPatient.with("First Name" + dataGenerator.randomString(5), staffId).
                registrationMode(TestPatient.PATIENT_REGN_MODE.USE_PREPRINTED_ID).
                patientType(TestPatient.PATIENT_TYPE.CHILD_UNDER_FIVE).estimatedDateOfBirth(false).
                motechId(identifierGenerator.newPatientId());
        patientPage.create(patient);
        SearchPatientPage searchPatientPage = browser.toSearchPatient(patientPage);
        String motechId = patient.motechId();
        searchPatientPage.searchWithMotechId(motechId);
        searchPatientPage.displaying(patient);


        OpenMRSPatientPage openMRSPatientPage = openMRSBrowser.toOpenMRSPatientPage(openMRSDB.getOpenMRSId(motechId));
        String encounterId = openMRSPatientPage.chooseEncounter("PATIENTREGVISIT");

        OpenMRSEncounterPage openMRSEncounterPage = openMRSBrowser.toOpenMRSEncounterPage(encounterId);

        openMRSEncounterPage.displaying(Collections.<OpenMRSObservationVO>emptyList());
    }
}
